<job>
<script language="JavaScript" src="./Lib/reSTconverter.js"></script>
<script language="JavaScript" src="./Lib/MessageWindow.js"></script>
<script language="JavaScript" src="./Lib/ADOStream.js"></script>
<script language="JavaScript" src="./Lib/Strings.js"></script>
<script language="JavaScript" src="./Lib/Files.js"></script>
<script language="JavaScript" src="./config.js"></script>
<script language="JavaScript">

/* Create Knowledge Base Index Tool
*  Version 0.7
*  Author : Joey Chen
*  Date   : 2012/11/10
*  
*  Usage :
*     実行には windows で実行可能な sphinx 環境が必要です。
*     config.js の Dir_* と File_ の変数を定義した上で本ファイルを
*     Windows PowerShell で実行することで、指定されたファイル名[インデックスファイル]
*     を再帰的に検索して .rst ファイル化し、sphinx の html ファイルを build します。
* 
*  Update Log :
* 
*     Version 0.2
*       実環境に併せてプログラムを変更
* 
*     Version 0.3
*       バグ訂正
* 
*     Version 0.4 2012/06/06
*       WSFファイル化
*       共用の関数について、外部Libファイル参照化
*       .rst ファイル生成前に、既存 .rst ファイルを削除する処理を追加
*       共有フォルダ上の conf.py ファイルを取得する様に処理を変更
* 
*     Version 0.5 2012/06/15
*       第1階層のフォルダを元に複数の toctree を生成する様処理を追加
*       なお、第1階層直下にインデックスファイルを置く必要がある。（空ファイルでもよい）
*
*     Version 0.6 2012/08/05
*       環境設定用変数を別ファイル config.js として分離
*       toctree 生成関連バグフィックス
*
*     Version 0.7 2012/11/10
*       reSTconverter.js を使用するように改良し、不要なメソッドを削除した
*
*/

// ************** Constant Definition ***********

// 注意：以下各ディレクトリ変数を宣言する際は\を\\と書いて下さい。
//       ネットワーク上の共有フォルダも指定できます（\\\\hostName\\folderName）

// 環境設定は Version 0.6 より別ファイルに分離した。
// 以下は未設定の場合のデフォルトとして処理する。
var Dif_appName = Dif_appName ? Dif_appName : "My Knowledge Base";
    // このアプリケーションの名前（実動作にはたいして関係ないので適当でよい）

var Dir_sphinxWorkDir = Dir_sphinxWorkDir ? Dir_sphinxWorkDir : "D:\\KnowledgeBase.sphinx\\source";
    // Sphinxの.rstを配置するディレクトリ

var Dir_sphinxMakeDir = Dir_sphinxMakeDir ? Dir_sphinxMakeDir : "D:\\KnowledgeBase.sphinx";
    // make.batフォルダの置き場所
    // 上記と基本的に同じでよいはずだが、変更している場合は記載すること

var Dir_sphinxWorkDirHtml = Dir_sphinxWorkDirHtml ? Dir_sphinxWorkDirHtml : "D:\\KnowledgeBase.sphinx\\build\\html";
    // Sphinxによってビルドされたhtmlフォルダ

var Dir_indexSearchDir = Dir_indexSearchDir ? Dir_indexSearchDir : "D:\\KnowledgeBase";
    // インデックスファイルをサーチする対象
    // このフォルダ配下に対して再帰的にファイルをサーチする

var File_indexFileName = File_indexFileName ? File_indexFileName : "000_IndexFile.txt";
    // 検索されるインデックスファイル名

var Dir_indexHtmlDir = Dir_indexHtmlDir ? Dir_indexHtmlDir : "D:\\KnowledgeBase.index";
    // Sphinxによってビルドされたhtmlを配置する公開ディレクトリ場所

var File_confPy = File_confPy ? File_confPy : "D:\\KnowledgeBase\\conf.py";
    // Sphinx ビルド設定ファイル(conf.py)の保存場所

var Num_FolderDepth4Titles = Num_FolderDepth4Titles ? Num_FolderDepth4Titles : 1;
    // タイトルとして扱う階層の深さを指定

var EnbaleSmblinkReplace = new Boolean(false);
    // :smblink:ロールのパス変換機能 sphinxcontrib.smblink を使う場合は true してもよい

// -- ここまで環境設定は Version 0.6 より別ファイルに分離した。 --


// init reSTconverter Object
var objRest = new reSTconverter();        // reSTconverter.js object
objRest.setSrcDirPath(Dir_sphinxWorkDir); // objRest に .rst のソースディレクトリを教える
objRest.enableSmblinkReplace = EnbaleSmblinkReplace; //:smblink:ロールのパス変換機能設定

// toctree のタイトルグループ番号
var Num_TocTitleListCount = new Number();
Num_TocTitleListCount = 0;

// フォルダ階層の深さ管理用変数
var Num_FolderDepth = new Number();
Num_FolderDepth = 0;

// ************** Main ***************

// 開始表示
MessageWindow_info(Dif_appName, "ファイル更新を開始します\nこのメッセージは自動で消えます", 1);

// 既設 .rst ファイルを削除する
Files_deleteFile(Dir_sphinxWorkDir+"\\*.rst");

// 共有フォルダ上のconf.pyを取得
Files_copyFile(File_confPy, Dir_sphinxWorkDir +"\\");

// 指定ディレクトリ配下を再帰的にサーチし、インデックスファイルを生成
getFilesFromRecursiveDir (Dir_indexSearchDir);

// Sphinx用 index.rst を生成
objRest.newIndexFile(Dif_appName,true);

// Sphinxの make.bat html を実行
makeHTML();

// 生成された html ファイルを公開ディレクトリにコピー
uploadSphinxHtml(Dir_sphinxWorkDirHtml, Dir_indexHtmlDir);

// 終了表示
MessageWindow_info(Dif_appName, "ファイル更新完了しました\nこのメッセージは自動で消えます", 2);


// ************* Functions *********************

// Run Sphinx make.bat
function makeHTML() {

    var objShell;
    var objFileSys;
    var _sphinxExecPath;


    objFileSys = WScript.CreateObject("Scripting.FileSystemObject");	// Create File System Object
    _sphinxExecPath = objFileSys.BuildPath(Dir_sphinxMakeDir,"make.bat") + " html";

      // WScript.echo(_sphinxExecPath);
      // DEBUG

    objShell = WScript.CreateObject("WScript.shell");	// Create Shell Object
    objShell.CurrentDirectory = objFileSys.BuildPath(Dir_sphinxMakeDir,"");

    objShell.Run(_sphinxExecPath , 2 , true);

}

// Search Index Files and Create rst Files
// _SourceDir: 検索されるディレクトリ名
function getFilesFromRecursiveDir(_SourceDir) {

	var objApl;
	var objFolder;
	var objFolderItems;

	objApl = WScript.CreateObject("Shell.Application");	// Create Shell Object
	objFolder = objApl.NameSpace(_SourceDir);		        // Create Folder Object
	objFolderItems = objFolder.Items();			            // Get Items From Folder Object

    // DEBUG
    // WScript.echo(_SourceDir + " Item Count is " + objFolderItems.count);

	getFolderItemNames(objFolderItems);

	objFolderItems = null;
	objFolder = null;
	objApl = null;
}

// Recursive Search Function
// _tmpFolderItems : 再帰検索されるフォルダ名
function getFolderItemNames(_tmpFolderItems) {

  var objFolderItemsB;
  var objItem;
  var i;

	for (i=0;i<_tmpFolderItems.count;i++) {

		objItem = _tmpFolderItems.Item(i);

		if (objItem.IsFolder==true) {

      // アンカーファイルがないフォルダの場合
			if (objItem.path != Dir_sphinxWorkDir) {

				Num_FolderDepth ++;

				objFolderItemsB = objItem.GetFolder;
				getFolderItemNames(objFolderItemsB.Items());

				Num_FolderDepth --;
			}
      
    } else {

      // アンカーファイルがあるフォルダの場合
			if (objItem.name==File_indexFileName) {

          // DEBUG
          //MessageWindow_msg("getFolderItemNames", 
          //"Folder Depth = "+ Num_FolderDepth + "\nParent Name = " + objItem.parent + "\nItem count = " + _tmpFolderItems.count , "2");

        // フォルダ階層が指定数より浅い場合はタイトルとして採用する
				if ( Num_FolderDepth <= Num_FolderDepth4Titles ) {
          Num_TocTitleListCount++;
          objRest.pushTocTitleList(objItem.parent); // フォルダ名を toctree のタイトルとして設定する
				}

        try {
          // create test file by rstFileConvert Method
          objRest.rstFileConvert(objItem.path, Dir_sphinxWorkDir, objItem.parent + ".rst");
          objRest.pushTocItemList(Num_TocTitleListCount, objItem.parent);
        } catch (result) {
          MessageWindow_warn("Error at reSTconverter_rstFileConvert", result + " ... fail convert item " + objItem.path , 0);
        }

			}
		}
	}

  objItem = null;
  objFolderItemsB = null;

}


// copy Sphinx HTML Dir to Dir_indexHtmlDir
// _srcDirPath : コピー元フォルダ
// _destDirPath: コピー先フォルダ
//               なお、コピー先フォルダはフォルダ名まで記載する必要がある
function uploadSphinxHtml(_srcDirPath,_destDirPath) {

    var objFileSys;
    var _from;
    var _to;

    objFileSys = WScript.CreateObject("Scripting.FileSystemObject");	// Create File System Object
    _from = objFileSys.BuildPath(_srcDirPath,"");
    _to = objFileSys.BuildPath(_destDirPath,"");

    // WScript.echo("copy " + _from + "\nto " + _to);
    // DEBUG

    objFileSys.CopyFolder(_from, _to, true);
    

}


</script>
</job>
